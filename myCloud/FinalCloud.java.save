import java.io.*;
import java.net.*;
import java.util.*;

public class FinalCloud{
	ServerSocket myServerSocket;
	static boolean locked=false;
	boolean ServerOn=true;
	static int counter=0;
	static List<Socket> CarInfo;
	public FinalCloud(){
		CarInfo = new ArrayList();
		try{
			myServerSocket = new ServerSocket(16000);
		}catch(IOException e){
			System.out.println("Could not create server socket on port 16000.Quitting");
			System.exit(-1);
		}
		System.out.println("System is on and is waiting");
		while(ServerOn){
			try{
				Socket clientSocket = myServerSocket.accept();
				Thread t = Thread.currentThread();
				counter++;
				if(counter<2000){
					ClientServiceThread cliThread = new ClientServiceThread(clientSocket);
					cliThread.start();
				}
				else{
					CarInfo.add(clientSocket);
					System.out.println("The queue is "+CarInfo);		
					if(!locked){
						ClientServiceThread cliThread = new ClientServiceThread(clientSocket);
						cliThread.start();
					}
					else{
						while(locked){
							try{
								t.sleep(1000);
								System.out.println("sleeping");
							}catch(InterruptedException e){}
						}
						Socket soc = CarInfo.get(0);
						ClientServiceThread cliThread = new ClientServiceThread(soc);
						cliThread.start();
					}
				}
			}catch(IOException ioe){
				System.out.println("Exception found on accept. Ignoring ");
				ioe.printStackTrace();
			}catch(Exception e){}
		}
		try{
			myServerSocket.close();
			System.out.println("Server Stopped");
		}catch(Exception e){
			System.out.println("Error found. stopping server socket");
			System.exit(-1);
		}
	}
	public static void main(String[]args){
		new FinalCloud();
	}
	class ClientServiceThread extends Thread{
		Socket myClientSocket;
		String MAC;
		boolean m_bRunThread = true;
		public ClientServiceThread(){
			super();
		}
		ClientServiceThread(Socket s){
			myClientSocket = s;
		}
		public void run(){
			if(FinalCloud.counter>2000){
				call();
			}
			else{
				call1();
			}
		}
		synchronized void call1(){
			System.out.println("Working on " + myClientSocket);
			InputStream inFromServer = null;
			OutputStream outToServer = null;
			DataInputStream in = null;
			DataOutputStream out = null;
			String path;
			FileWriter fw = null;
			BufferedWriter bw = null;
			System.out.println("Accpeted Client Address - " + myClientSocket.getInetAddress().getHostName());
			try{
				inFromServer = myClientSocket.getInputStream();
				outToServer = myClientSocket.getOutputStream();
				in = new DataInputStream(inFromServer);
				out = new DataOutputStream(outToServer);
				while(m_bRunThread){
					long startTime = System.currentTimeMillis();
					path=new String();
					int source = Integer.parseInt(in.readUTF());
					int dest = Integer.parseInt(in.readUTF());
					
					DijkstrasAlgorithm ob=new DijkstrasAlgorithm();
					path = ob.dijkstra(source-1,dest-1);
					System.out.println("The path is "+path);
					out.writeUTF(path);//Send to the fog
					long en dTime = System.currentTimeMillis();
					System.out.println("The latency of computation is "+String.format("%.3f",(endTime-startTime)/1000.0));
					out.close();
					in.close();
						m_bRunThread = false;
					if(!ServerOn){
						System.out.println("Server has already stopped");
						m_bRunThread = false;
					}
				}
			}catch(Exception e ){
			}
			finally{
				try{
					in.close();
					out.close();
					myClientSocket.close();
					fw.close();
					bw.close();
					System.out.println("..Stopped");
				}catch(Exception e){
				}
			}
			FinalCloud.counter--;
		}
		synchronized void call(){}
	}
}
					
